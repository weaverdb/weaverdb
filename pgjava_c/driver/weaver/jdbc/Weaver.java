/*
 * Weaver.java
 *
 * Created on November 16, 2003, 11:48 AM
 */

package driver.weaver.jdbc;

import driver.weaver.*;
import java.sql.*;
import java.util.*;
import java.io.*;
import java.net.*;
/**
 *
 * @author  mscott
 */
public class Weaver implements Connection {

    WeaverConnection base = new WeaverConnection();
    boolean running_transaction = false;
    int exec_count;
    String result_word = "";
    boolean autocommit = false;
    boolean active = true;
    boolean normalize = false;
    
    Properties connection;
    
    /**
     * Creates a new instance of Weaver
     */
    public Weaver(java.util.Properties prop) throws SQLException {
        connection = prop;
        connect();
    }
    
    private void connect() throws SQLException {
        Properties prop = connection;
        int port = Integer.parseInt(prop.getProperty("port","1020"));
        StringBuilder connect = new StringBuilder();
        try {
            connect.append(prop.getProperty("user").toString());
            connect.append('/');
            connect.append(prop.getProperty("password").toString());
            connect.append('@');
            connect.append(prop.getProperty("database").toString());
            
            base.grabConnection(connect.toString());
            if ( base.getResult() == 0 ) {
                active = true;
            } else {
                throw new SQLException("authentication failed");
            }
        } catch ( java.sql.SQLException sql ) {
            active = false;
            throw sql;
        } catch ( Exception exp ) {
            active = false;
            throw new SQLException(exp.getMessage());
        }
    }

    public void clearWarnings() {
        
    }
    
    public void close() {
        base.disposeConnection();
    }
    
    public void commit() throws SQLException {
        base.commitTransaction();
    }
    
    public Statement createStatement() {
        return new WeaverStatement(this,null);
    }
    
    public Statement createStatement(int resultSetType, int resultSetConcurrency) {
        return new WeaverStatement(this,null);
    }
    
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        return new WeaverStatement(this,null);
    }
    
    public boolean getAutoCommit() {
        return autocommit;
    }
    
    public String getCatalog() {
        return "";
    }
    
    public int getHoldability() {
        return ResultSet.CLOSE_CURSORS_AT_COMMIT;
    }
    
    public DatabaseMetaData getMetaData() {
        return new WeaverMetaData(this);
    }
    
    public int getTransactionIsolation() {
        return Connection.TRANSACTION_READ_COMMITTED;
    }
    
    public Map getTypeMap() {
        return null;
    }
    
    public SQLWarning getWarnings() {
        return null;
    }
    
    public boolean isClosed() throws SQLException {
        return !active;
    }
    
    public boolean isReadOnly() throws SQLException {
        return true;
    }
    
    public String nativeSQL(String sql) throws SQLException {
        return sql;
    }
    
    public CallableStatement prepareCall(String sql) throws SQLException {
        throw new SQLException("not supported");
    }
    
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        throw new SQLException("not supported");
    }
    
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        throw new SQLException("not supported");
    }
    
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        WeaverStatement state=  new WeaverStatement(this,sql);
        return state;
    }
    
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        WeaverStatement state=  new WeaverStatement(this,sql);
        return state;
    }
    
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        WeaverStatement state=  new WeaverStatement(this,sql);
        return state;
    }
    
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        WeaverStatement state=  new WeaverStatement(this,sql);
        return state;
    }
    
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        WeaverStatement state=  new WeaverStatement(this,sql);
        return state;
    }
    
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        WeaverStatement state=  new WeaverStatement(this,sql);
        return state;
    }
    
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
    }
    
    public void rollback() throws SQLException {
        base.abortTransaction();
    }
    
    public void rollback(Savepoint savepoint) throws SQLException {
    }
    
    public void setAutoCommit(boolean autoCommit) throws SQLException {
    }
    
    public void setCatalog(String catalog) throws SQLException {
    }
    
    public void setHoldability(int holdability) throws SQLException {
    }
    
    public void setReadOnly(boolean readOnly) throws SQLException {
    }
    
    public Savepoint setSavepoint() throws SQLException {
        return null;
    }
    
    public Savepoint setSavepoint(String name) throws SQLException {
        return null;
    }
    
    public void setTransactionIsolation(int level) throws SQLException {
    }
    
    public void setTypeMap(java.util.Map map) throws SQLException {
        System.out.println("type map:" + map);
    }
    
    public void parseStatement(String sql) throws SQLException {
        if ( !active ) {
            connect();
        }
        base.parseStatement(sql);
    }
    
    public boolean execute() throws SQLException {
        base.execute();
        if ( base.getResult() == 0 ) return true;
        else return false;
    }
    
    protected void cancel() {
        running_transaction = false;
        base.cancel();
    }
   
    public int getCount() {
        return exec_count;
    }
    
    
    public Object[] fetch() throws SQLException {
        return null;
    }
    

    
    public Collection getResultsHeader() throws SQLException {
        return null;
    }
    
    public Collection getParameters() throws SQLException {
        return null;
    }

    public Clob createClob() throws SQLException {
        throw new SQLException("not implemented");
    }

    public Blob createBlob() throws SQLException {
        throw new SQLException("not implemented");
    }

    public NClob createNClob() throws SQLException {
        throw new SQLException("not implemented");
    }

    public SQLXML createSQLXML() throws SQLException {
        throw new SQLException("not implemented");
    }

    public boolean isValid(int timeout) throws SQLException {
        throw new SQLException("not implemented");
    }

    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        throw new SQLClientInfoException();
    }

    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        throw new SQLClientInfoException();
    }

    public String getClientInfo(String name) throws SQLException {
         throw new SQLException("not implemented");
    }

    public Properties getClientInfo() throws SQLException {
        throw new SQLException("not implemented");
    }

    public <T extends BaseQuery> T createQueryObject(Class<T> ifc) throws SQLException {
        throw new SQLException("not implemented");
    }

    public <T extends BaseQuery> T createQueryObject(Class<T> ifc, Connection con) throws SQLException {
        throw new SQLException("not implemented");
    }

    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        throw new SQLException("not implemented");
    }

    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
         throw new SQLException("not implemented");
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        throw new SQLException("not implemented");
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        throw new SQLException("not implemented");
    }
    
}

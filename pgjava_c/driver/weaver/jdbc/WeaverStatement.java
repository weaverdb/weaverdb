/*
 * WeaverStatement.java
 *
 * Created on November 16, 2003, 12:24 PM
 */

package driver.weaver.jdbc;

import java.io.InputStream;
import java.io.Reader;
import java.sql.*;
/**
 *
 * @author  mscott
 */
public class WeaverStatement implements PreparedStatement {
    WeaverResultSetMetaData meta_data;
    Weaver connection;
    WeaverResultSet current_results;
    String statement;
    int fetch_count = 10;
    int total_count;
    /**
     * Creates a new instance of WeaverStatement
     */
    public WeaverStatement(Weaver conn, String sql) {
        connection = conn;
        statement = sql;
    }
    
    public void addBatch() throws SQLException {
    }
    
    public void addBatch(String sql) throws SQLException {
    }
    
    public void cancel() throws SQLException {
        connection.cancel();
    }
    
    public void clearBatch() throws SQLException {
    }
    
    public void clearParameters() throws SQLException {
    }
    
    public void clearWarnings() throws SQLException {
    }
    
    public void close() throws SQLException {
    }
    
    public boolean execute() throws SQLException {
        meta_data = null;
        connection.parseStatement(statement);
        boolean results = connection.execute();
        if ( results ) total_count = connection.getCount();
        return results;
    }
    
    public boolean execute(String sql) throws SQLException {
        meta_data = null;
        statement = sql;
        connection.parseStatement(statement);
        boolean results = connection.execute();
        if ( results ) total_count = connection.getCount();
        return results;
    }
    
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        meta_data = null;
        statement = sql;
        connection.parseStatement(statement);
        boolean results = connection.execute();
        if ( results ) total_count = connection.getCount();
        return results;
    }
    
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        meta_data = null;
        statement = sql;
        connection.parseStatement(statement);
        boolean results = connection.execute();
        if ( results ) total_count = connection.getCount();
        return results;
    }
    
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        meta_data = null;
        statement = sql;
        connection.parseStatement(statement);
        boolean results = connection.execute();
        if ( results ) total_count = connection.getCount();
        return results;
    }
    
    public int[] executeBatch() throws SQLException {
        throw new SQLException("not supported");
    }
    
    public ResultSet executeQuery() throws SQLException {
        meta_data = null;
       connection.parseStatement(statement);
       connection.execute();
        return new WeaverRunningResultSet(this.getEntireResults(this.getMaxRows()),this,(WeaverResultSetMetaData)getMetaData());
    }
    
    public ResultSet executeQuery(String sql) throws SQLException {
        meta_data = null;
        statement = sql;
        connection.parseStatement(statement);
        connection.execute();
        return new WeaverRunningResultSet(this.getEntireResults(this.getMaxRows()),this,(WeaverResultSetMetaData)getMetaData());
    }
    
    public int getCount() {
        return total_count;
    }
    
    public int executeUpdate() throws SQLException {
        throw new SQLException("not supported");
    }
    
    public int executeUpdate(String sql) throws SQLException {
        throw new SQLException("not supported");
        
    }
    
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLException("not supported");
    }
    
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        throw new SQLException("not supported");
        
    }
    
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLException("not supported");
        
    }
    
    public Connection getConnection() throws SQLException {
        return connection;
    }
    
    public int getFetchDirection() throws SQLException {
        return ResultSet.FETCH_FORWARD;
    }
    
    public int getFetchSize() throws SQLException {
        return fetch_count;
    }
    
    public ResultSet getGeneratedKeys() throws SQLException {
        return null;
    }
    
    public int getMaxFieldSize() throws SQLException {
        throw new SQLException("not supported");
    }
    
    public int getMaxRows() throws SQLException {
        return 50;
    }
    
    public ResultSetMetaData getMetaData() throws SQLException {
        if ( meta_data == null ) meta_data = new WeaverResultSetMetaData(connection);
        return meta_data;
    }
    
    protected java.util.List getEntireResults(int max_size) throws SQLException {
        java.util.ArrayList fetch = new java.util.ArrayList();
        for(int x=0;x<max_size;x++) {
            Object[] row = connection.fetch();
            if ( row != null ) fetch.add(row);
            else break;
        }
        return  fetch;
    }
    
    public boolean getMoreResults() throws SQLException {
        current_results = new WeaverResultSet(getEntireResults(this.getFetchSize()),this,(WeaverResultSetMetaData)getMetaData());
        return (current_results.size() != 0);
    }
    
    public boolean getMoreResults(int current) throws SQLException {
        return this.getMoreResults(this.getFetchSize());
    }
    
    public ParameterMetaData getParameterMetaData() throws SQLException {
        return new WeaverParameterMetaData(connection);
    }
    
    public int getQueryTimeout() throws SQLException {
        return 0;
    }
    
    public ResultSet getResultSet() throws SQLException {
        return current_results;
    }
    
    public int getResultSetConcurrency() throws SQLException {
        return ResultSet.CONCUR_READ_ONLY;
    }
    
    public int getResultSetHoldability() throws SQLException {
        return ResultSet.CLOSE_CURSORS_AT_COMMIT;
    }
    
    public int getResultSetType() throws SQLException {
        return ResultSet.TYPE_FORWARD_ONLY;
    }
    
    public int getUpdateCount() throws SQLException {
        throw new SQLException("not supported");
    }
    
    public SQLWarning getWarnings() throws SQLException {
        return null;
    }
    
    public void setArray(int i, Array x) throws SQLException {
        throw new SQLException("not supported");
    }
    
    public void setAsciiStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException {
        
    }
    
    public void setBigDecimal(int parameterIndex, java.math.BigDecimal x) throws SQLException {
    }
    
    public void setBinaryStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException {
    }
    
    public void setBlob(int i, Blob x) throws SQLException {
    }
    
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
    }
    
    public void setByte(int parameterIndex, byte x) throws SQLException {
    }
    
    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
    }
    
    public void setCharacterStream(int parameterIndex, java.io.Reader reader, int length) throws SQLException {
    }
    
    public void setClob(int i, Clob x) throws SQLException {
    }
    
    public void setCursorName(String name) throws SQLException {
    }
    
    public void setDate(int parameterIndex, java.sql.Date x) throws SQLException {
    }
    
    public void setDate(int parameterIndex, java.sql.Date x, java.util.Calendar cal) throws SQLException {
    }
    
    public void setDouble(int parameterIndex, double x) throws SQLException {
    }
    
    public void setEscapeProcessing(boolean enable) throws SQLException {
    }
    
    public void setFetchDirection(int direction) throws SQLException {
    }
    
    public void setFetchSize(int rows) throws SQLException {
        fetch_count = rows;
    }
    
    public void setFloat(int parameterIndex, float x) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setInt(int parameterIndex, int x) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setLong(int parameterIndex, long x) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setMaxFieldSize(int max) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setMaxRows(int max) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setObject(int parameterIndex, Object x) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setQueryTimeout(int seconds) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setRef(int i, Ref x) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setShort(int parameterIndex, short x) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setString(int parameterIndex, String x) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setTime(int parameterIndex, java.sql.Time x) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setTime(int parameterIndex, java.sql.Time x, java.util.Calendar cal) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setTimestamp(int parameterIndex, java.sql.Timestamp x) throws SQLException {
         throw new SQLException("not implemented");
    }    
    
    public void setTimestamp(int parameterIndex, java.sql.Timestamp x, java.util.Calendar cal) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setURL(int parameterIndex, java.net.URL x) throws SQLException {
         throw new SQLException("not implemented");
    }
    
    public void setUnicodeStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException {
         throw new SQLException("not implemented");
    }

    public void setRowId(int parameterIndex, RowId x) throws SQLException {
         throw new SQLException("not implemented");
    }

    public void setNString(int parameterIndex, String value) throws SQLException {
         throw new SQLException("not implemented");
    }

    public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
         throw new SQLException("not implemented");
    }

    public void setNClob(int parameterIndex, NClob value) throws SQLException {
         throw new SQLException("not implemented");
    }

    public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
         throw new SQLException("not implemented");
    }

    public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
         throw new SQLException("not implemented");
    }

    public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
         throw new SQLException("not implemented");
    }    

    public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
         throw new SQLException("not implemented");
    }

    public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
         throw new SQLException("not implemented");
    }

    public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
         throw new SQLException("not implemented");
    }

    public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
         throw new SQLException("not implemented");
    }

    public boolean isClosed() throws SQLException {
         throw new SQLException("not implemented");
    }

    public void setPoolable(boolean poolable) throws SQLException {
         throw new SQLException("not implemented");
    }

    public boolean isPoolable() throws SQLException {
         throw new SQLException("not implemented");
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
         throw new SQLException("not implemented");
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
          throw new SQLException("not implemented");
    }
    
}
